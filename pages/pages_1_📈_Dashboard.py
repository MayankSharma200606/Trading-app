{"cells":[{"cell_type":"code","source":"import streamlit as st\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nst.set_page_config(layout=\"wide\")\n\n# Check if data is loaded in session state\nif 'data' not in st.session_state:\n    st.error(\"Data not loaded. Please go back to the main app page.\")\n    st.stop()\n\ndata = st.session_state.data\n\n# --- HELPER FUNCTIONS ---\ndef get_performance_metrics(df):\n    \"\"\"Calculates key performance metrics for the stock.\"\"\"\n    start_price = df['Close'].iloc[0]\n    end_price = df['Close'].iloc[-1]\n    total_return = ((end_price - start_price) / start_price) * 100\n    annualized_return = total_return * (252 / len(df))\n    daily_returns = df['Close'].pct_change()\n    volatility = daily_returns.std() * (252 ** 0.5) * 100\n    return total_return, annualized_return, volatility\n\n# --- PAGE TITLE & HEADER ---\nst.title(\"Market Dashboard\")\nst.markdown(\"An overview of the market and key metrics for SIMULATED_STOCK (AAPL).\")\n\n# --- METRICS CARDS ---\ntotal_return, annualized_return, volatility = get_performance_metrics(data)\ncol1, col2, col3, col4 = st.columns(4)\ncol1.metric(\"Current Price\", f\"${data['Close'].iloc[-1]:.2f}\", f\"{data['Close'].iloc[-1] - data['Close'].iloc[-2]:.2f}\")\ncol2.metric(\"Total Return\", f\"{total_return:.2f}%\")\ncol3.metric(\"Annualized Return\", f\"{annualized_return:.2f}%\")\ncol4.metric(\"Annualized Volatility\", f\"{volatility:.2f}%\")\n\n# --- MAIN CHART ---\nst.subheader(\"Price Chart\")\n\n# Create a candlestick chart with volume\nfig = make_subplots(rows=2, cols=1, shared_xaxes=True,\n                    vertical_spacing=0.03, subplot_titles=('Price', 'Volume'),\n                    row_width=[0.2, 0.7])\n\n# Candlestick chart\nfig.add_trace(go.Candlestick(x=data.index,\n                             open=data['Open'],\n                             high=data['High'],\n                             low=data['Low'],\n                             close=data['Close'],\n                             name=\"Price\"),\n              row=1, col=1)\n\n# Volume bar chart\nfig.add_trace(go.Bar(x=data.index, y=data['Volume'], name=\"Volume\", marker_color='rgba(0, 102, 204, 0.6)'),\n              row=2, col=1)\n\n# Update layout for a professional look\nfig.update_layout(\n    title='SIMULATED_STOCK Price and Volume',\n    yaxis_title='Price ($)',\n    xaxis_rangeslider_visible=False,\n    template='plotly_dark',\n    height=600,\n    showlegend=False\n)\nfig.update_yaxes(title_text=\"Volume\", row=2, col=1)\n\nst.plotly_chart(fig, use_container_width=True)\n\n# --- ADDITIONAL INFO ---\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.subheader(\"Recent Data\")\n    st.dataframe(data.tail(10).sort_index(ascending=False))\n\nwith col2:\n    st.subheader(\"Data Summary\")\n    st.write(data.describe())","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}