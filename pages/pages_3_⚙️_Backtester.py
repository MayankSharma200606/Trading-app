{"cells":[{"cell_type":"code","source":["import streamlit as st\n","import pandas as pd\n","import plotly.graph_objects as go\n","\n","st.set_page_config(layout=\"wide\")\n","\n","if 'data' not in st.session_state:\n","    st.error(\"Data not loaded. Please go back to the main app page.\")\n","    st.stop()\n","\n","data = st.session_state.data\n","\n","# --- BACKTESTING LOGIC ---\n","def run_sma_crossover_backtest(df, short_window, long_window, initial_capital):\n","    \"\"\"\n","    Runs a simple moving average crossover backtest.\n","    Returns equity curve, trades, and performance metrics.\n","    \"\"\"\n","    signals = pd.DataFrame(index=df.index)\n","    signals['signal'] = 0.0\n","\n","    # Create short and long simple moving averages\n","    signals['short_mavg'] = df['Close'].rolling(window=short_window, min_periods=1, center=False).mean()\n","    signals['long_mavg'] = df['Close'].rolling(window=long_window, min_periods=1, center=False).mean()\n","\n","    # Generate signals\n","    signals['signal'][short_window:] = \\\n","        (signals['short_mavg'][short_window:] > signals['long_mavg'][short_window:]).astype(float)\n","\n","    # Generate trading orders\n","    signals['positions'] = signals['signal'].diff()\n","\n","    # --- Simulate Portfolio ---\n","    positions = pd.DataFrame(index=signals.index).fillna(0.0)\n","    positions['Stock'] = 100 * signals['positions'] # Buy/sell 100 shares\n","    portfolio = positions.multiply(df['Close'], axis=0)\n","    pos_diff = positions.diff()\n","\n","    portfolio['holdings'] = (positions.multiply(df['Close'], axis=0)).sum(axis=1)\n","    portfolio['cash'] = initial_capital - (pos_diff.multiply(df['Close'], axis=0)).sum(axis=1).cumsum()\n","    portfolio['total'] = portfolio['cash'] + portfolio['holdings']\n","    portfolio['returns'] = portfolio['total'].pct_change()\n","\n","    # --- Extract Trades for Plotting ---\n","    trades = signals[signals['positions'] != 0]\n","\n","    return portfolio, trades\n","\n","# --- PAGE UI ---\n","st.title(\"Strategy Backtester\")\n","\n","# --- CONFIGURATION ---\n","st.header(\"Configuration\")\n","col1, col2, col3 = st.columns(3)\n","with col1:\n","    initial_capital = st.number_input(\"Initial Capital\", min_value=1000, value=100000, step=1000)\n","with col2:\n","    short_window = st.slider(\"Short SMA Window\", 5, 50, 10)\n","with col3:\n","    long_window = st.slider(\"Long SMA Window\", 20, 100, 40)\n","\n","# --- RUN BACKTEST ---\n","if st.button(\"Run Backtest\", use_container_width=True):\n","    if short_window >= long_window:\n","        st.error(\"Short window must be smaller than long window.\")\n","    else:\n","        with st.spinner(\"Running backtest...\"):\n","            portfolio, trades = run_sma_crossover_backtest(data, short_window, long_window, initial_capital)\n","\n","            # --- DISPLAY RESULTS ---\n","            st.header(\"Results\")\n","\n","            # Performance Metrics\n","            final_value = portfolio['total'].iloc[-1]\n","            total_return = (final_value - initial_capital) / initial_capital * 100\n","            sharpe_ratio = (portfolio['returns'].mean() / portfolio['returns'].std()) * (252**0.5)\n","\n","            metric1, metric2, metric3 = st.columns(3)\n","            metric1.metric(\"Final Portfolio Value\", f\"${final_value:,.2f}\")\n","            metric2.metric(\"Total Return\", f\"{total_return:.2f}%\")\n","            metric3.metric(\"Annualized Sharpe Ratio\", f\"{sharpe_ratio:.2f}\")\n","\n","            # Equity Curve Chart\n","            fig = go.Figure()\n","            fig.add_trace(go.Scatter(x=portfolio.index, y=portfolio['total'], name='Equity Curve'))\n","            fig.update_layout(title=\"Portfolio Equity Curve\", template='plotly_dark', height=500)\n","            st.plotly_chart(fig, use_container_width=True)\n","\n","            # Trades Log\n","            st.subheader(\"Trades Log\")\n","            st.write(f\"Total Trades: {len(trades)}\")\n","            st.dataframe(trades[trades['positions'] != 0])"],"outputs":[],"execution_count":null,"metadata":{"id":"IIOhO5cma_Fw"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"45eZN1vPbVPe"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}